[{"path":"https://github.com/BaderLab/FLASHMM/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://github.com/BaderLab/FLASHMM/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://github.com/BaderLab/FLASHMM/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://github.com/BaderLab/FLASHMM/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://github.com/BaderLab/FLASHMM/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://github.com/BaderLab/FLASHMM/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://github.com/BaderLab/FLASHMM/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://github.com/BaderLab/FLASHMM/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://github.com/BaderLab/FLASHMM/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://github.com/BaderLab/FLASHMM/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://github.com/BaderLab/FLASHMM/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://github.com/BaderLab/FLASHMM/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://github.com/BaderLab/FLASHMM/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://github.com/BaderLab/FLASHMM/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://github.com/BaderLab/FLASHMM/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://github.com/BaderLab/FLASHMM/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://github.com/BaderLab/FLASHMM/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://github.com/BaderLab/FLASHMM/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://github.com/BaderLab/FLASHMM/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://github.com/BaderLab/FLASHMM/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://github.com/BaderLab/FLASHMM/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":[]},{"path":"https://github.com/BaderLab/FLASHMM/articles/FLASHMM-vignette.html","id":"lmm-estimation-and-inference","dir":"Articles","previous_headings":"Method","what":"LMM estimation and inference","title":"Single-cell differential expression analysis with FLASHMM","text":"Consider linear mixed-effects model (LMM) expressed (Searle, Casella, McCulloch 2006) (#eq:lmm)y=Xβ+Zb+ϵ,\\begin{equation} (\\#eq:lmm) y = X\\beta + Zb + \\epsilon, \\end{equation} yy n×1n\\times 1 vector observed responses, XX n×pn\\times p design matrix fixed effects β\\beta, ZZ n×qn\\times q design matrix random effects bb, ϵ\\epsilon n×1n\\times 1 vector residual errors. term random effects may combination various components, Zb=Z1b1+⋯+ZKbK, Zb = Z_1 b_1 + \\cdots + Z_K b_K,  Z=[Z1,…,ZK]Z=[Z_1,\\ldots,Z_K], b=[b1T,…,bKT]Tb=[b^T_1,\\ldots,b^T_K]^T, KK number random-effect components, ZkZ_k n×qkn\\times q_k design matrix kk-th random-effect component. superscript TT denotes transpose vector matrix. basic assumptions follows: design matrix XX full rank, satisfying conditions estimability parameters; random vectors bkb_k ϵ\\epsilon independent follow normal distribution, bk∼N(𝟎,σk2Iqk)andϵ∼N(𝟎,σ2In).b_k \\sim N(\\mathbf{0}, \\sigma^2_k I_{q_k})\\quad\\text{}\\quad\\epsilon \\sim N(\\mathbf{0}, \\sigma^2I_n). 𝟎\\mathbf{0} vector matrix zero elements, InI_n n×nn\\times n identity matrix, σk2\\sigma^2_k σ2\\sigma^2 unknown parameters, called variance components. Hartley Rao (1967) developed maximum likelihood estimation (MLE) method estimating LMM parameters (fixed effects variance components). Patterson Thompson (1971) proposed modified maximum likelihood procedure partitions data two mutually uncorrelated parts, one free fixed effects used estimating variance components, called restricted maximum likelihood (REML) estimator. REML estimator unbiased. MLE variance components biased general. methods asymptotically identical estimating variance components. variance components, θ\\theta, estimated, fixed effects estimated either MLE REML given follows β̂=(XTVθ−1X)−1XTVθ−1y, \\hat\\beta = (X^TV_{\\theta}^{-1}X )^{-1}X^TV_{\\theta}^{-1}y,  covariance matrix var(β̂)=(XTVθ−1X)−1,var(\\hat\\beta) = (X^TV_{\\theta}^{-1}X)^{-1}, θ=(θ0,θ1,…,θK)\\theta = (\\theta_0, \\theta_1,\\ldots, \\theta_K), θ0=σ2\\theta_0 = \\sigma^2, θk=σk2\\theta_k = \\sigma^2_k, Vθ=θ0In+θ1Z1Z1T+…+θKZKZKT.V_{\\theta} = \\theta_0 I_n + \\theta_1 Z_1Z_1^T + \\ldots + \\theta_K Z_KZ_K^T. Estimating variance components either MLE REML difficult numerical problem. Various iterative methods based log likelihood, called gradient methods, proposed (Searle, Casella, McCulloch 2006). gradient methods represented iteration equation (#eq:gradient)θ(+1)=θ()+Γ(θ())∂l(θ())∂θ,\\begin{equation} (\\#eq:gradient) \\theta^{(+1)} = \\theta^{()} + \\Gamma(\\theta^{()})\\frac{\\partial l(\\theta^{()})}{\\partial\\theta}, \\end{equation} ∂l(θ)/∂θ\\partial l(\\theta)/\\partial\\theta gradient log likelihood function, Γ(θ)\\Gamma(\\theta) modifier matrix gradient direction, can specified Newton–Raphson, Fisher scoring average information, see Supplementary Materials manuscript details. hypotheses testing fixed effects variance components can respectively defined H0,:βi=0versusH1,:βi≠0, H_{0, }: \\beta_i = 0 ~~\\text{versus}~~H_{1,}: \\beta_i\\ne 0, H0,k:θk≤0versusH1,k:θk>0, H_{0, k}: \\theta_k \\leq 0 ~~\\text{versus}~~H_{1,k}: \\theta_k > 0,  θk\\theta_k, k=1,…,Kk=1, \\ldots, K, represent parameters variance components σk2\\sigma^2_k allowed negative. lower boundary parameters, θ\\theta, can negative value variance-covariance matrix, VθV_{\\theta}, remains definable (positive definite). Note negative lower boundary exists can less −σ2/λmax- \\sigma^2/\\lambda_{max}, λmax>0\\lambda_{max} > 0, largest singular value ZZTZZ^T. θk>0\\theta_k > 0, σk2=θk\\sigma_k^2 = \\theta_k definable mixed model well-specified. Otherwise, θk≤0\\theta_k \\le 0, mixed model miss-specified random effects needed. Allowing parameters variance components take negative value avoids zero boundary problem hypothesis testing variance components. Consequently, asymptotic properties maximum likelihood estimation hold regularity conditions, enables us use z-statistics t-statistics hypothesis testing fixed effects variance components. t-statistics fixed effects given (#eq:tcoef)Ti=β̂ivar(β̂)=β̂ivar(β̂)ii∼t(n−p).\\begin{equation} (\\#eq:tcoef) T_i = \\frac{\\hat\\beta_i}{\\sqrt{var(\\hat\\beta_i)}} = \\frac{\\hat\\beta_i}{\\sqrt{var(\\hat\\beta)_{ii}}} ~\\sim ~t(n - p). \\end{equation} t-statistic contrast, linear combination estimated fixed effects, cTβ̂c^T\\hat\\beta, (#eq:tcontrast)Tc=cTβ̂cTvar(β̂)c∼t(n−p).\\begin{equation} (\\#eq:tcontrast) T_c = \\frac{c^T\\hat\\beta}{\\sqrt{c^Tvar(\\hat\\beta) c}} \\sim t(n-p). \\end{equation} z-statistics parameters variance components given (#eq:zvarcomp)Zk=θ̂k[(θ̂)−1]kk∼N(0,1),\\begin{equation} (\\#eq:zvarcomp) Z_k = \\frac{\\hat\\theta_k}{\\sqrt{[(\\hat\\theta)^{-1}]_{kk}}} \\sim N(0, 1), \\end{equation} (θ)(\\theta) Fisher information matrix.","code":""},{"path":"https://github.com/BaderLab/FLASHMM/articles/FLASHMM-vignette.html","id":"fast-and-scalable-algorithm","dir":"Articles","previous_headings":"Method","what":"Fast and scalable algorithm","title":"Single-cell differential expression analysis with FLASHMM","text":"developed summary statistics based algorithm implementing gradient method @ref(eq:gradient). Let XXXX, XYXY, ZXZX, ZYZY, ZZZZ denote matrix, respectively, define summary statistics computed cell-level data XX, YY ZZ follows: (#eq:sdata)XX=XTX,XY=XTYT,ZX=ZTX,ZY=ZTYT,ZZ=ZTZ,Ynorm=[y1y1T,…,ymymT],\\begin{equation} (\\#eq:sdata) \\begin{array}{l} XX = X^TX, ~XY = X^TY^T,\\\\ ZX = Z^TX, ~ZY = Z^TY^T, ~ZZ = Z^TZ,\\\\ Ynorm = [y_1y_1^T, \\ldots, y_my_m^T], \\end{array} \\end{equation} Y=[y1T,…,ymT]TY = [y_1^T, \\ldots, y_m^T]^T mm--nn matrix gene expression profile row yiy_i corresponding expression gene ii, =1,…,mi=1,\\ldots,m. summary statistics precomputed, summary-level data based algorithm complexity O(m(p3+q3))O(m(p^3 + q^3)), doesn’t depend number cells (sample size nn). single-cell DE analysis, numbers fixed random effects, pp qq, relatively small. Therefore, algorithm fast scalable, requires less computer memory. See Supplemental Materials manuscript details.","code":""},{"path":"https://github.com/BaderLab/FLASHMM/articles/FLASHMM-vignette.html","id":"flashmm","dir":"Articles","previous_headings":"","what":"FLASHMM","title":"Single-cell differential expression analysis with FLASHMM","text":"FLASHMM package provides two functions, lmm lmmfit, fitting LMM. lmm function uses summary statistics arguments. lmmfit function wrapper function lmm, directly uses cell-level data computes summary statistics inside function. lmmfit function simple operated limitation memory use. large scale data, use lmm instead lmmfit. , precompute summary-level data @ref(eq:sdata) sslmm function FLASHMM package, use lmm function fit LMM. FLASHMM provides lmmtest function perform statistical test fixed effects contrasts fixed effects. summary, FLASHMM package provides following functions. lmm: fit LMM using summary-level data. lmmfit: fit LMM using cell-level data. lmmtest: perform statistical tests fixed effects contrasts. sslmm: compute summary-level data using cell-level data. simuRNAseq: simulate multi-sample multi-cell-type scRNA-seq dataset based negative binomial distribution.","code":""},{"path":"https://github.com/BaderLab/FLASHMM/articles/FLASHMM-vignette.html","id":"quick-start","dir":"Articles","previous_headings":"FLASHMM","what":"Quick start","title":"Single-cell differential expression analysis with FLASHMM","text":"","code":"#Install FLASHMM from Github. library(devtools) devtools::install_github(\"https://github.com/Baderlab/FLASHMM\")  #Load the package. library(FLASHMM)"},{"path":"https://github.com/BaderLab/FLASHMM/articles/FLASHMM-vignette.html","id":"simulating-a-scrna-seq-dataset-by-simurnaseq","dir":"Articles","previous_headings":"FLASHMM > Quick start","what":"Simulating a scRNA-seq dataset by simuRNAseq","title":"Single-cell differential expression analysis with FLASHMM","text":"Simulate multi-sample multi-cell-cluster scRNA-seq dataset comprising 25 samples 4 clusters (cell-types) 2 treatments.","code":"set.seed(2412) dat <- simuRNAseq(nGenes = 50, nCells = 1000,                    nsam = 25, ncls = 4, ntrt = 2, nDEgenes = 6)  names(dat) #> [1] \"ref.mean.dispersion\" \"metadata\"            \"counts\"              #> [4] \"DEgenes\"             \"treatment\" ##  #counts and meta data counts <- dat$counts metadata <- dat$metadata rm(dat)"},{"path":"https://github.com/BaderLab/FLASHMM/articles/FLASHMM-vignette.html","id":"de-analysis-using-lmm","dir":"Articles","previous_headings":"FLASHMM > Quick start","what":"DE analysis using LMM","title":"Single-cell differential expression analysis with FLASHMM","text":"","code":"##(1) Model design ##Y: gene expression profile (log-transformed counts) ##X: design matrix for fixed effects ##Z: design matrix for random effects  Y <- log(counts + 1)  X <- model.matrix(~ 0 + log(libsize) + cls + cls:trt, data = metadata) Z <- model.matrix(~ 0 + sam, data = metadata) d <- ncol(Z) ##  ##(2) LMM fitting ##Fit LMM by lmmfit using cell-level data. fit <- lmmfit(Y, X, Z, d = d)  ##Fit LMM by lmm using summary-level data computed as follows. ##- Computing summary statistics n <- nrow(X) XX <- t(X)%*%X; XY <- t(Y%*%X) ZX <- t(Z)%*%X; ZY <- t(Y%*%Z); ZZ <- t(Z)%*%Z Ynorm <- rowSums(Y*Y) ##- Fitting LMM fitss <- lmm(XX, XY, ZX, ZY, ZZ, Ynorm = Ynorm, n = n, d = d)  identical(fit, fitss) #> [1] TRUE ##  ##Fit LMM by lmm using summary-level data computed by sslmm. ##- Computing summary statistics ss <- sslmm(X, Y, Z) ##- Fitting LMM fitss <- lmm(summary.stats = ss, d = d)  identical(fit, fitss) #> [1] TRUE ##  ##(3) Hypothesis tests test <- lmmtest(fit) #head(test)  ##t-values all(t(fit$t) == test[, grep(\"_t\", colnames(test))]) #> [1] TRUE fit$t[, 1:5] #>                   Gene1      Gene2      Gene3      Gene4      Gene5 #> log(libsize)  3.5564382  6.1353128  3.6098989  4.1239445  2.8179995 #> clsC1        -2.4158938 -4.8697164 -2.3122737 -2.6709945 -1.3220206 #> clsC2        -2.5957105 -4.9918921 -2.2467924 -2.5108410 -1.2387859 #> clsC3        -2.5576263 -5.0249733 -2.1484996 -2.5856150 -1.2535998 #> clsC4        -2.4466344 -5.0065480 -2.2202673 -2.6983076 -1.2058758 #> clsC1:trtB    0.8697778  0.3659413  0.1515357  0.9707563 -0.9577914 #> clsC2:trtB    2.0700456  1.0976568 -0.1112106  0.7423556 -0.5997369 #> clsC3:trtB    1.5066385  1.5001771 -0.3659261  0.8883383 -1.0410003 #> clsC4:trtB   -0.3263183  1.6810047 -0.4559326  0.6462646 -1.7515738 ##  ##p-values all(t(fit$p) == test[, grep(\"_p\", colnames(test))]) #> [1] TRUE fit$p[, 1:5] #>                     Gene1        Gene2        Gene3        Gene4       Gene5 #> log(libsize) 0.0003936946 1.226867e-09 0.0003216502 4.036515e-05 0.004928509 #> clsC1        0.0158766072 1.300111e-06 0.0209667982 7.686618e-03 0.186466367 #> clsC2        0.0095791682 7.060831e-07 0.0248727531 1.220264e-02 0.215718133 #> clsC3        0.0106867912 5.971329e-07 0.0319158551 9.862323e-03 0.210283172 #> clsC4        0.0145925607 6.556356e-07 0.0266262016 7.087769e-03 0.228153191 #> clsC1:trtB   0.3846324624 7.144869e-01 0.8795840262 3.319065e-01 0.338401544 #> clsC2:trtB   0.0387066712 2.726210e-01 0.9114719020 4.580478e-01 0.548818677 #> clsC3:trtB   0.1322220329 1.338870e-01 0.7144983040 3.745743e-01 0.298129310 #> clsC4:trtB   0.7442524470 9.307711e-02 0.6485383571 5.182577e-01 0.080156444"},{"path":"https://github.com/BaderLab/FLASHMM/articles/FLASHMM-vignette.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"Single-cell differential expression analysis with FLASHMM","text":"use simulated multi-sample multi-cell-type scRNA-seq dataset illustrate utilize FLASHMM perform single-cell differential expression analysis. interested identifying genes differentially expressed two treatments (conditions) within cell type.","code":""},{"path":"https://github.com/BaderLab/FLASHMM/articles/FLASHMM-vignette.html","id":"simulating-multi-sample-multi-cell-type-scrna-seq-dataset","dir":"Articles","previous_headings":"Example","what":"Simulating multi-sample multi-cell-type scRNA-seq dataset","title":"Single-cell differential expression analysis with FLASHMM","text":"generate multi-sample multi-cell-type scRNA-seq dataset using reference dataset simuRNAseq function FLASHMM package. use PBMC 10X droplet-based scRNA-seq dataset (Kang et al. 2018) reference dataset, contains count data metadata. metadata include 3 columns: individuals (subjects samples), cell types (clusters), treatments (conditions) named ‘sam’, ‘cls’, ‘trt’, respectively. Note simuRNAseq function can also generate scRNA-seq dataset without reference dataset. case, following step preparing reference dataset can skipped.","code":""},{"path":"https://github.com/BaderLab/FLASHMM/articles/FLASHMM-vignette.html","id":"preparing-reference-dataset","dir":"Articles","previous_headings":"Example > Simulating multi-sample multi-cell-type scRNA-seq dataset","what":"Preparing reference dataset","title":"Single-cell differential expression analysis with FLASHMM","text":"load PBMC dataset, need ExperimentHub package.","code":"library(ExperimentHub) #> Error in get(paste0(generic, \".\", class), envir = get_method_env()) :  #>   object 'type_sum.accel' not found  ##Load data. eh <- ExperimentHub() #query(eh, \"Kang\") sce <- eh[[\"EH2259\"]]  ##Remove undetected genes. sce <- sce[rowSums(counts(sce) > 0) > 0, ] ##Remove cells with few or many detected genes (outliers). nGenes <- colSums(counts(sce) > 0) bx <- boxplot(log(nGenes), plot = FALSE) sce <- sce[, nGenes >= exp(bx$stats[1]) & nGenes <= exp(bx$stats[5])] ##Remove lowly expressed genes. ##counts per cell (cpc)  cpc <- rowSums(counts(sce))/ncol(sce) sce <- sce[(rowSums(counts(sce) > 1) >= 10) & (cpc > 0.005), ]  ##counts and metadata counts <- assay(sce, \"counts\") coldata <- as.data.frame(colData(sce)) head(coldata) #>                   ind stim cluster            cell multiplets #> AAACATACAATGCC-1  107 ctrl       5     CD4 T cells    doublet #> AAACATACATTTCC-1 1016 ctrl       9 CD14+ Monocytes    singlet #> AAACATACCAGAAA-1 1256 ctrl       9 CD14+ Monocytes    singlet #> AAACATACCAGCTA-1 1256 ctrl       9 CD14+ Monocytes    doublet #> AAACATACCATGCA-1 1488 ctrl       3     CD4 T cells    singlet #> AAACATACCTCGCT-1 1256 ctrl       9 CD14+ Monocytes    singlet all(colnames(counts) == rownames(coldata)) #> [1] TRUE dim(counts) #> [1]  7483 28721 rm(eh, sce)"},{"path":"https://github.com/BaderLab/FLASHMM/articles/FLASHMM-vignette.html","id":"generating-dataset","dir":"Articles","previous_headings":"Example > Simulating multi-sample multi-cell-type scRNA-seq dataset","what":"Generating dataset","title":"Single-cell differential expression analysis with FLASHMM","text":"use reference dataset generate scRNA-seq dataset simuRNAseq function. First need specify columns represent samples (individuals), cell clusters (types), treatments (experimental conditions) reference metadata ‘sam’, ‘cls’, ‘trt’, respectively. also specify numbers genes, cells differentially expressed (DE) genes generated. use default settings arguments simuRNAseq function. generated dataset contains count data, metadata, DE genes specific cell cluster. DE genes can considered positive controls others negative controls. Without confusion, DE can represent either ‘differentially expressed’ ‘differential expression’.","code":"##Specify which columns represent samples, treatments, and cell-types. colnames(coldata)[colnames(coldata) == \"ind\"] <- \"sam\"  #samples colnames(coldata)[colnames(coldata) == \"stim\"] <- \"trt\" #treatments colnames(coldata)[colnames(coldata) == \"cell\"] <- \"cls\" #cell-types coldata <- coldata[, c(\"sam\", \"trt\", \"cls\")] head(coldata) #>                   sam  trt             cls #> AAACATACAATGCC-1  107 ctrl     CD4 T cells #> AAACATACATTTCC-1 1016 ctrl CD14+ Monocytes #> AAACATACCAGAAA-1 1256 ctrl CD14+ Monocytes #> AAACATACCAGCTA-1 1256 ctrl CD14+ Monocytes #> AAACATACCATGCA-1 1488 ctrl     CD4 T cells #> AAACATACCTCGCT-1 1256 ctrl CD14+ Monocytes ##  ##Generate the dataset by simuRNAseq function. set.seed(2412) dat <- simuRNAseq(counts, nGenes = 500, nCells = 120000, metadata = coldata,                    nsam = 25, ncls = 10, ntrt = 2, nDEgenes = 20,                    minbeta = 0.5, maxbeta = 1, var.randomeffects = 0.1) str(dat) #> List of 5 #>  $ ref.mean.dispersion:'data.frame': 7483 obs. of  2 variables: #>   ..$ mu        : num [1:7483] 0.0718 0.2008 19.708 0.0725 0.0755 ... #>   ..$ dispersion: num [1:7483] 0.5183 0.0814 0.1902 0.0963 0.0483 ... #>  $ metadata           :'data.frame': 120000 obs. of  4 variables: #>   ..$ sam    : int [1:120000] 1488 1256 1488 1256 1015 1016 1016 1256 1256 1244 ... #>   ..$ trt    : Factor w/ 2 levels \"ctrl\",\"stim\": 2 1 1 1 1 2 1 2 2 2 ... #>   ..$ cls    : Factor w/ 8 levels \"B cells\",\"CD14+ Monocytes\",..: 3 2 3 1 4 6 4 3 2 3 ... #>   ..$ libsize: num [1:120000] 1170 745 886 576 962 ... #>  $ counts             : num [1:500, 1:120000] 0 0 1 0 0 0 0 0 0 0 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : chr [1:500] \"EPC2\" \"TNFRSF18\" \"TMEM87A\" \"SIRT6\" ... #>   .. ..$ : chr [1:120000] \"GAGCATACGGAAGC-1\" \"CATGCCACAACTGC-1\" \"AGTGAAGAAGCGTT-1\" \"CTAACGGAGACACT-1\" ... #>  $ DEgenes            :'data.frame': 20 obs. of  3 variables: #>   ..$ gene   : chr [1:20] \"LNPEP\" \"C22orf39_ENSG00000242259\" \"MED29\" \"RANGAP1\" ... #>   ..$ beta   : num [1:20] 0.799 0.821 -0.911 -0.649 -0.896 ... #>   ..$ cluster: chr [1:20] \"B cells\" \"B cells\" \"CD14+ Monocytes\" \"CD4 T cells\" ... #>  $ treatment          : chr \"stim\"  ##Remove the reference dataset that is no longer needed in the following analysis. rm(counts, coldata)"},{"path":"https://github.com/BaderLab/FLASHMM/articles/FLASHMM-vignette.html","id":"de-analysis-of-the-simulated-scrna-seq-data","dir":"Articles","previous_headings":"Example","what":"DE analysis of the simulated scRNA-seq data","title":"Single-cell differential expression analysis with FLASHMM","text":"perform differential expression analysis simulated dataset using FLASHMM package. identify significantly differentially expressed genes two treatments cell-type. analyses involve following steps: LMM design, LMM fitting, exploring LMM fit DE genes. LMM design: construct design matrices fixed random effects described @ref(eq:lmm), compute gene expression profile. gene expression taken log-transformed count matrix, Y=log(1+counts),Y = \\log(1+\\text{counts}), row corresponds expression profile gene. design matrix fixed effects can created function model.matrix, follows X=model.matrix(∼0+log(library.size)+cell.type+cell.type:treatment), X = model.matrix(\\sim 0 + log(library.size) + cell.type + cell.type:treatment),  interaction term cell.type:treatmentcell.type:treatment represents treatment effect specific cell-type. library.sizelibrary.size defined total sum counts across genes cell, normalization factor scRNA-seq counts. consider subjects (samples) random effects reflect intra-subject correlation inter-subject variability. design matrix random effects given Z=model.matrix(∼0+subject). Z = model.matrix(\\sim 0 + subject). LMM fitting: use either lmm lmmfit function fit LMMs genes. cell-level data matrices YY, XX ZZ, LMMs can fit lmmfit(Y,X,Z,d=d),lmmfit(Y, X, Z, d = d), dd number random-effects. KK components random-effects, d=(q1,…,qK)d = (q_1, \\ldots, q_K), qkq_k number columns design matrix ZkZ_k kk-th random-effect component. large-scale data, lmmfit function problem computer memory limit. case, recommended pre-compute summary-level data: XXXX, XYXY, ZXZX, ZYZY, ZZZZ, YnormY_{norm}, defined @ref(eq:sdata), use lmm function fit LMMs follows: lmm(XX,XY,ZX,ZY,ZZ,Ynorm=Ynorm,n=n,d=d).lmm(XX, XY, ZX, ZY, ZZ, Ynorm = Ynorm, n = n, d = d). summary-level data doesn’t depend sample size nn. makes lmm memory-efficient. lmm lmmfit functions also perform hypothesis testing fixed effects. can use lmmtest function perform statistical test contrasts fixed effects. LMM fitting returns list estimates LMM parameters (coefficients variance components), standard errors estimates, covariance matrix coefficients (fixed effects), t-values p-values hypothesis testing coefficients, gene. LMM fitting also returns numbers iterations first partial derivatives log likelihood termination iterations gene. Exploring LMM fit DE genes: check LMM fitting convergent, perform hypothesis testing variance components random effects. identify DE genes based hypothesis testing p-values coefficients (fixed effects). absolute first partial derivatives log likelihood less convergence tolerance, LMM fitting converges, otherwise doesn’t converge. genes LMM fitting doesn’t converge excluded subsequent analysis estimated coefficients genes reliable. DE genes can identified adjusting p-values obtained false discovery rate (FDR) family-wise error rate (Bonferroni correction). might exclude genes small coefficients (effect size log-fold-change).","code":""},{"path":"https://github.com/BaderLab/FLASHMM/articles/FLASHMM-vignette.html","id":"lmm-design","dir":"Articles","previous_headings":"Example > DE analysis of the simulated scRNA-seq data","what":"LMM design","title":"Single-cell differential expression analysis with FLASHMM","text":"","code":"##Gene expression matrix, Y = log2(1 + counts) Y <- log2(1 + dat$counts) dat$counts <- NULL #Remove the counts.  ##Design matrix for fixed effects X <- model.matrix(~ 0 + log(libsize) + cls + cls:trt, data = dat$meta) colnames(X) <- gsub(\"\\\\+\", \"p\", colnames(X)) colnames(X) <- gsub(\" \", \"_\", colnames(X))  ##Design matrix for random effects Z <- model.matrix(~ 0 + as.factor(sam), data = dat$meta) ##Dimension of random effects d <- ncol(Z)"},{"path":"https://github.com/BaderLab/FLASHMM/articles/FLASHMM-vignette.html","id":"lmm-fitting","dir":"Articles","previous_headings":"Example > DE analysis of the simulated scRNA-seq data","what":"LMM fitting","title":"Single-cell differential expression analysis with FLASHMM","text":"","code":"##(1) Fit LMM by cell-level data. max.iter <- 100 epsilon <- 1e-5 fit <- lmmfit(Y, X, Z, d = d, max.iter = max.iter, epsilon = epsilon) str(fit) #> List of 12 #>  $ method  : chr \"REML-FS\" #>  $ dlogL   : num [1:2, 1:500] 4.27e-07 -9.31e-10 6.08e-06 -8.50e-09 4.85e-06 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : NULL #>   .. ..$ : chr [1:500] \"dl\" \"dl\" \"dl\" \"dl\" ... #>  $ niter   : num [1:500] 7 6 7 7 14 12 12 7 8 6 ... #>  $ coef    : num [1:17, 1:500] 0.0171 -0.1112 -0.1096 -0.109 -0.1055 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : chr [1:17] \"log(libsize)\" \"clsB_cells\" \"clsCD14p_Monocytes\" \"clsCD4_T_cells\" ... #>   .. ..$ : chr [1:500] \"EPC2\" \"TNFRSF18\" \"TMEM87A\" \"SIRT6\" ... #>  $ se      : num [1:17, 1:500] 0.000991 0.007452 0.007863 0.007287 0.007398 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : chr [1:17] \"log(libsize)\" \"clsB_cells\" \"clsCD14p_Monocytes\" \"clsCD4_T_cells\" ... #>   .. ..$ : chr [1:500] \"EPC2\" \"TNFRSF18\" \"TMEM87A\" \"SIRT6\" ... #>  $ t       : num [1:17, 1:500] 17.3 -14.9 -13.9 -15 -14.3 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : chr [1:17] \"log(libsize)\" \"clsB_cells\" \"clsCD14p_Monocytes\" \"clsCD4_T_cells\" ... #>   .. ..$ : chr [1:500] \"EPC2\" \"TNFRSF18\" \"TMEM87A\" \"SIRT6\" ... #>  $ p       : num [1:17, 1:500] 7.29e-67 2.88e-50 3.82e-44 1.60e-50 4.11e-46 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : chr [1:17] \"log(libsize)\" \"clsB_cells\" \"clsCD14p_Monocytes\" \"clsCD4_T_cells\" ... #>   .. ..$ : chr [1:500] \"EPC2\" \"TNFRSF18\" \"TMEM87A\" \"SIRT6\" ... #>  $ cov     : num [1:17, 1:17, 1:500] 9.81e-07 -6.95e-06 -7.49e-06 -6.93e-06 -6.87e-06 ... #>   ..- attr(*, \"dimnames\")=List of 3 #>   .. ..$ : chr [1:17] \"log(libsize)\" \"clsB_cells\" \"clsCD14p_Monocytes\" \"clsCD4_T_cells\" ... #>   .. ..$ : chr [1:17] \"log(libsize)\" \"clsB_cells\" \"clsCD14p_Monocytes\" \"clsCD4_T_cells\" ... #>   .. ..$ : chr [1:500] \"EPC2\" \"TNFRSF18\" \"TMEM87A\" \"SIRT6\" ... #>  $ df      : int 119983 #>  $ theta   : num [1:2, 1:500] 2.68e-05 1.80e-02 1.12e-04 7.88e-02 1.91e-04 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : chr [1:2] \"var1\" \"var0\" #>   .. ..$ : chr [1:500] \"EPC2\" \"TNFRSF18\" \"TMEM87A\" \"SIRT6\" ... #>  $ se.theta: num [1:2, 1:500] 1.52e-05 7.34e-05 6.36e-05 3.22e-04 1.06e-04 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : chr [1:2] \"var1\" \"var0\" #>   .. ..$ : chr [1:500] \"EPC2\" \"TNFRSF18\" \"TMEM87A\" \"SIRT6\" ... #>  $ RE      : NULL ##  ##(2) Fit LMM by summary-level data. ##- Compute the summary-level data. n <- nrow(X) XX <- t(X)%*%X XY <- t(Y%*%X) ZX <- t(Z)%*%X ZY <- t(Y%*%Z) ZZ <- t(Z)%*%Z Ynorm <- rowSums(Y*Y)  rm(X, Y, Z) #release the memory.  ##- Fit LMM. fitss <- lmm(XX, XY, ZX, ZY, ZZ, Ynorm = Ynorm, n = n, d = d,               max.iter = max.iter, epsilon = epsilon) identical(fit, fitss) #> [1] TRUE rm(fitss)  ##Test the treatment effect within all cell-types. ##- Construct a contrast by summing the treatment effects across cell-types. contrast <- cbind(\"trt\" = numeric(nrow(fit$coef))) contrast[grep(\":\", rownames(fit$coef)), ] <- 1  ##- Test the contrast. test <- lmmtest(fit, contrast = contrast) head(test) #>               trt_t     trt_p #> EPC2     -1.4955064 0.1347850 #> TNFRSF18  1.3729485 0.1697709 #> TMEM87A  -0.1572237 0.8750688 #> SIRT6    -0.7064178 0.4799297 #> IL12RB1  -1.6251549 0.1041322 #> RBFA      0.6404263 0.5218967"},{"path":"https://github.com/BaderLab/FLASHMM/articles/FLASHMM-vignette.html","id":"exploring-lmm-fit-and-the-de-genes","dir":"Articles","previous_headings":"Example > DE analysis of the simulated scRNA-seq data","what":"Exploring LMM fit and the DE genes","title":"Single-cell differential expression analysis with FLASHMM","text":"","code":"##(1) Check which LMM fittings converge. cvg <- (apply(abs(fit$dlogL), 2, max) < epsilon)  sum(cvg)  #> [1] 500 ##  ##(2) Hypothesis testing for variance components: ##    H0, theta <\/= 0 vs H1, theta > 0. z <- fit$theta[\"var1\", ]/fit$se.theta[\"var1\", ] p <- pnorm(z, lower.tail = FALSE) sum(p <= 0.05) #> [1] 461 ##  ##(3) The DE genes specific to a cell-type ##Coefficients and p-values for the genes specific to a cell-type. index <- grep(\":\", rownames(fit$coef)) beta <- t(fit$coef[index, cvg]) p <- t(fit$p[index, cvg])  ##Adjust p-values by FDR. padj <- matrix(p.adjust(c(p), method = \"fdr\"), nrow = nrow(p), ncol = ncol(p))  ##DE genes specific to a cell cluster with FDR < 0.05. degenes <- NULL for (j in 1:ncol(p)){   i <- (padj[, j] < 0.05)   degenes <- rbind(degenes, data.frame(gene = rownames(p)[i], cluster = j, coef = beta[i, j], p = p[i, j])) } rownames(degenes) <- NULL dim(degenes) #> [1] 31  4 degenes[1:10, ] #>                        gene cluster        coef            p #> 1                     LNPEP       1 0.038532290 2.205190e-20 #> 2  C22orf39_ENSG00000242259       1 0.061134158 3.618583e-37 #> 3                     EIF3G       2 0.024793616 5.835875e-05 #> 4    FAM58A_ENSG00000147382       2 0.013428790 7.854205e-07 #> 5                       CD7       2 0.030955080 2.766240e-04 #> 6                      TMPO       2 0.009871346 1.898710e-04 #> 7                      GPS2       2 0.008835609 4.649781e-05 #> 8                    FAM96A       2 0.014721218 3.116602e-04 #> 9                    CSTF2T       2 0.011218177 3.093001e-04 #> 10                    EIF3M       2 0.024587165 6.576295e-05  sessionInfo() #> R version 4.4.2 (2024-10-31) #> Platform: x86_64-apple-darwin20 #> Running under: macOS Monterey 12.7.6 #>  #> Matrix products: default #> BLAS:   /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/lib/libRblas.0.dylib  #> LAPACK: /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0 #>  #> locale: #> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 #>  #> time zone: America/Toronto #> tzcode source: internal #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] muscData_1.18.0             SingleCellExperiment_1.26.0 #>  [3] SummarizedExperiment_1.34.0 Biobase_2.64.0              #>  [5] GenomicRanges_1.56.2        GenomeInfoDb_1.40.1         #>  [7] IRanges_2.38.1              S4Vectors_0.42.1            #>  [9] MatrixGenerics_1.16.0       matrixStats_1.4.1           #> [11] ExperimentHub_2.12.0        AnnotationHub_3.12.0        #> [13] BiocFileCache_2.12.0        dbplyr_2.5.0                #> [15] BiocGenerics_0.50.0         FLASHMM_0.1.0               #> [17] devtools_2.4.5              usethis_3.1.0               #>  #> loaded via a namespace (and not attached): #>  [1] tidyselect_1.2.1        dplyr_1.1.4             blob_1.2.4              #>  [4] filelock_1.0.3          Biostrings_2.72.1       fastmap_1.2.0           #>  [7] promises_1.3.2          digest_0.6.37           mime_0.12               #> [10] lifecycle_1.0.4         ellipsis_0.3.2          processx_3.8.4          #> [13] KEGGREST_1.44.1         RSQLite_2.3.9           magrittr_2.0.3          #> [16] compiler_4.4.2          rlang_1.1.4             sass_0.4.9              #> [19] tools_4.4.2             yaml_2.3.10             knitr_1.49              #> [22] S4Arrays_1.4.1          htmlwidgets_1.6.4       bit_4.5.0.1             #> [25] pkgbuild_1.4.5          curl_6.0.1              DelayedArray_0.30.1     #> [28] abind_1.4-8             pkgload_1.4.0           miniUI_0.1.1.1          #> [31] withr_3.0.2             purrr_1.0.2             desc_1.4.3              #> [34] grid_4.4.2              urlchecker_1.0.1        profvis_0.4.0           #> [37] xtable_1.8-4            MASS_7.3-64             cli_3.6.3               #> [40] rmarkdown_2.29          crayon_1.5.3            ragg_1.3.3              #> [43] generics_0.1.3          remotes_2.5.0           rstudioapi_0.17.1       #> [46] httr_1.4.7              sessioninfo_1.2.2       DBI_1.2.3               #> [49] cachem_1.1.0            zlibbioc_1.50.0         AnnotationDbi_1.66.0    #> [52] BiocManager_1.30.25     XVector_0.44.0          vctrs_0.6.5             #> [55] Matrix_1.7-1            jsonlite_1.8.9          bookdown_0.41           #> [58] callr_3.7.6             bit64_4.5.2             systemfonts_1.1.0       #> [61] jquerylib_0.1.4         glue_1.8.0              pkgdown_2.1.1           #> [64] ps_1.8.1                BiocVersion_3.19.1      later_1.4.1             #> [67] UCSC.utils_1.0.0        tibble_3.2.1            pillar_1.10.0           #> [70] rappdirs_0.3.3          htmltools_0.5.8.1       GenomeInfoDbData_1.2.12 #> [73] R6_2.5.1                textshaping_0.4.1       evaluate_1.0.1          #> [76] shiny_1.10.0            lattice_0.22-6          png_0.1-8               #> [79] memoise_2.0.1           httpuv_1.6.15           bslib_0.8.0             #> [82] Rcpp_1.0.13-1           SparseArray_1.4.8       xfun_0.49               #> [85] fs_1.6.5                pkgconfig_2.0.3"},{"path":"https://github.com/BaderLab/FLASHMM/articles/FLASHMM-vignette.html","id":"remarks","dir":"Articles","previous_headings":"","what":"Remarks","title":"Single-cell differential expression analysis with FLASHMM","text":"Building design matrices fixed random effects key step LMM-based DE analysis. Including library size, normalization factor scRNA-seq, fixed effect can help reduce p-value inflation. needed, can add principal components (PCs) fixed effects remove unknown batch effect.","code":""},{"path":[]},{"path":"https://github.com/BaderLab/FLASHMM/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Changjiang Xu. Author, maintainer. Gary Bader. Author.","code":""},{"path":"https://github.com/BaderLab/FLASHMM/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Xu C, Bader G (2025). FLASHMM: Fast Scalable Single Cell Differential Expression Analysis using Mixed-effects Models. R package version 0.1.0, https://github.com/BaderLab/FLASHMM.","code":"@Manual{,   title = {FLASHMM: Fast and Scalable Single Cell Differential Expression Analysis using Mixed-effects Models},   author = {Changjiang Xu and Gary Bader},   year = {2025},   note = {R package version 0.1.0},   url = {https://github.com/BaderLab/FLASHMM}, }"},{"path":"https://github.com/BaderLab/FLASHMM/index.html","id":"flashmm","dir":"","previous_headings":"","what":"Fast and Scalable Single Cell Differential Expression Analysis using Mixed-effects Models","title":"Fast and Scalable Single Cell Differential Expression Analysis using Mixed-effects Models","text":"FLASHMM package analysis single-cell differential expression (DE) using linear mixed- effects model (LMM). mixed-effects model become powerful tool single-cell studies due ability model intra-subject correlation inter-subject variability. FLASHMM package provides two functions, lmm lmmfit, fitting LMM. lmm function uses summary-level statistics arguments. lmmfit function wrapper function lmm, directly uses cell-level data computes summary statistics inside function. lmmfit function simple operated limitation memory use. large scale data, recommended precompute summary statistics use lmm function fit LMM. summary, FLASHMM package provides following functions. lmm: fit LMM using summary-level data. lmmfit: fit LMM using cell-level data. lmmtest: perform statistical tests fixed effects contrasts fixed effects. sslmm: compute summary-level data using cell-level data. simuRNAseq: simulate multi-sample multi-cell-type scRNA-seq dataset based negative binomial distribution.","code":""},{"path":"https://github.com/BaderLab/FLASHMM/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Fast and Scalable Single Cell Differential Expression Analysis using Mixed-effects Models","text":"can install development version FLASHMM Github:","code":"library(devtools) devtools::install_github(\"https://github.com/Baderlab/FLASHMM\")"},{"path":"https://github.com/BaderLab/FLASHMM/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Fast and Scalable Single Cell Differential Expression Analysis using Mixed-effects Models","text":"basic example shows use FLASHMM perform single-cell differential expression analysis.","code":"library(FLASHMM)"},{"path":"https://github.com/BaderLab/FLASHMM/index.html","id":"simulating-a-scrna-seq-dataset-by-simurnaseq","dir":"","previous_headings":"Example","what":"Simulating a scRNA-seq dataset by simuRNAseq","title":"Fast and Scalable Single Cell Differential Expression Analysis using Mixed-effects Models","text":"Simulate multi-sample multi-cell-cluster scRNA-seq dataset contains 25 samples 4 clusters (cell-types) 2 treatments.","code":"set.seed(2412) dat <- simuRNAseq(nGenes = 50, nCells = 1000,                    nsam = 25, ncls = 4, ntrt = 2, nDEgenes = 6) #> Message: the condition B is treated.  str(dat) #> List of 5 #>  $ ref.mean.dispersion:'data.frame': 50 obs. of  2 variables: #>   ..$ mu        : num [1:50] 1.077 0.992 2.815 1.945 2.06 ... #>   ..$ dispersion: num [1:50] 1.602 2.989 0.954 2.937 1.914 ... #>  $ metadata           :'data.frame': 1000 obs. of  4 variables: #>   ..$ sam    : chr [1:1000] \"B1\" \"A6\" \"A2\" \"B8\" ... #>   ..$ cls    : chr [1:1000] \"C4\" \"C3\" \"C1\" \"C1\" ... #>   ..$ trt    : chr [1:1000] \"B\" \"A\" \"A\" \"B\" ... #>   ..$ libsize: num [1:1000] 117 75 101 80 123 113 125 95 77 95 ... #>  $ counts             : num [1:50, 1:1000] 0 2 6 2 5 2 0 0 2 11 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : chr [1:50] \"Gene1\" \"Gene2\" \"Gene3\" \"Gene4\" ... #>   .. ..$ : chr [1:1000] \"Cell1\" \"Cell2\" \"Cell3\" \"Cell4\" ... #>  $ DEgenes            :'data.frame': 6 obs. of  3 variables: #>   ..$ gene   : chr [1:6] \"Gene45\" \"Gene46\" \"Gene47\" \"Gene48\" ... #>   ..$ beta   : num [1:6] 0.55 0.365 0.831 -0.948 -0.875 ... #>   ..$ cluster: chr [1:6] \"C1\" \"C2\" \"C3\" \"C3\" ... #>  $ treatment          : chr \"B\" ##  #counts and meta data counts <- dat$counts metadata <- dat$metadata rm(dat)"},{"path":"https://github.com/BaderLab/FLASHMM/index.html","id":"de-analysis-using-lmm","dir":"","previous_headings":"Example","what":"DE analysis using LMM","title":"Fast and Scalable Single Cell Differential Expression Analysis using Mixed-effects Models","text":"Model design Y: gene expression profile (log-transformed counts) X: design matrix fixed effects Z: design matrix random effects LMM fitting Fit LMM lmmfit using cell-level data. Fit LMM lmm using summary-level data computed follows. Fit LMM lmm using summary-level data computed sslmm. Hypothesis tests","code":"Y <- log(counts + 1)  X <- model.matrix(~ 0 + log(libsize) + cls + cls:trt, data = metadata) Z <- model.matrix(~ 0 + sam, data = metadata) d <- ncol(Z) fit <- lmmfit(Y, X, Z, d = d) #Computing summary statistics n <- nrow(X) XX <- t(X)%*%X; XY <- t(Y%*%X) ZX <- t(Z)%*%X; ZY <- t(Y%*%Z); ZZ <- t(Z)%*%Z Ynorm <- rowSums(Y*Y)  #Fitting LMM fitss <- lmm(XX, XY, ZX, ZY, ZZ, Ynorm = Ynorm, n = n, d = d)  identical(fit, fitss) #> [1] TRUE #Computing summary statistics ss <- sslmm(X, Y, Z)  #Fitting LMM fitss <- lmm(summary.stats = ss, d = d)  identical(fit, fitss) #> [1] TRUE test <- lmmtest(fit) #head(test)  #t-values all(t(fit$t) == test[, grep(\"_t\", colnames(test))]) #> [1] TRUE fit$t[, 1:5] #>                   Gene1      Gene2      Gene3      Gene4      Gene5 #> log(libsize)  3.5564382  6.1353128  3.6098989  4.1239445  2.8179995 #> clsC1        -2.4158938 -4.8697164 -2.3122737 -2.6709945 -1.3220206 #> clsC2        -2.5957105 -4.9918921 -2.2467924 -2.5108410 -1.2387859 #> clsC3        -2.5576263 -5.0249733 -2.1484996 -2.5856150 -1.2535998 #> clsC4        -2.4466344 -5.0065480 -2.2202673 -2.6983076 -1.2058758 #> clsC1:trtB    0.8697778  0.3659413  0.1515357  0.9707563 -0.9577914 #> clsC2:trtB    2.0700456  1.0976568 -0.1112106  0.7423556 -0.5997369 #> clsC3:trtB    1.5066385  1.5001771 -0.3659261  0.8883383 -1.0410003 #> clsC4:trtB   -0.3263183  1.6810047 -0.4559326  0.6462646 -1.7515738 ##  #p-values all(t(fit$p) == test[, grep(\"_p\", colnames(test))]) #> [1] TRUE fit$p[, 1:5] #>                     Gene1        Gene2        Gene3        Gene4       Gene5 #> log(libsize) 0.0003936946 1.226867e-09 0.0003216502 4.036515e-05 0.004928509 #> clsC1        0.0158766072 1.300111e-06 0.0209667982 7.686618e-03 0.186466367 #> clsC2        0.0095791682 7.060831e-07 0.0248727531 1.220264e-02 0.215718133 #> clsC3        0.0106867912 5.971329e-07 0.0319158551 9.862323e-03 0.210283172 #> clsC4        0.0145925607 6.556356e-07 0.0266262016 7.087769e-03 0.228153191 #> clsC1:trtB   0.3846324624 7.144869e-01 0.8795840262 3.319065e-01 0.338401544 #> clsC2:trtB   0.0387066712 2.726210e-01 0.9114719020 4.580478e-01 0.548818677 #> clsC3:trtB   0.1322220329 1.338870e-01 0.7144983040 3.745743e-01 0.298129310 #> clsC4:trtB   0.7442524470 9.307711e-02 0.6485383571 5.182577e-01 0.080156444"},{"path":"https://github.com/BaderLab/FLASHMM/reference/lmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Fitting Linear Mixed-effects Models — lmm","title":"Fitting Linear Mixed-effects Models — lmm","text":"lmm used fit linear mixed-effects models (LMM) based summary-level data. LMM parameters estimated restricted maximum likelihood (REML) Fisher scoring (FS) gradient descent algorithm.","code":""},{"path":"https://github.com/BaderLab/FLASHMM/reference/lmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fitting Linear Mixed-effects Models — lmm","text":"","code":"lmm(   XX,   XY,   ZX,   ZY,   ZZ,   Ynorm,   n,   summary.stats = NULL,   d,   theta0 = NULL,   method = \"REML-FS\",   max.iter = 50,   epsilon = 1e-05,   output.cov = TRUE,   output.RE = FALSE )"},{"path":"https://github.com/BaderLab/FLASHMM/reference/lmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fitting Linear Mixed-effects Models — lmm","text":"XX t(X)%*%X, X design matrix fixed effects. XY t(Y%*%X), Y features--samples matrix observed responses (genes--cells expression matrix scRNA-seq). ZX t(Z)%*%X, Z = [Z1, ..., Zk],  design matrix k random factors (variables). ZY t(Y%*%Z). ZZ t(Z)%*%Z. Ynorm Norms features (row Y), , Ynorm = rowSums(Y*Y). n Numbers samples (cells scRNA-seq), nrow(X). summary.stats list summary statistics: XX, XY, ZX, ZY, ZZ, Ynorm n, can computed csslmm function. d vector (m1,...,mk), mi = ncol(Zi), number columns Zi. m1 + ... + mk = ncol(Z), number columns Z. theta0 vector initial values variance components, (s1, ...,sk, s_(k+1)), si = sigma_i^2, variance component -th type random effects. s_(k+1) = sigma^2, variance component model residual error. method REML Fisher scoring (FS) iterative algorithm, REML-FS. max.iter maximal number iterations iterative algorithm. epsilon Positive convergence tolerance. absolute value first partial derivative log likelihood less epsilon, iterations converge. output.cov TRUE, output covariance matrices estimated coefficients, needed testing contrasts. output.RE TRUE, output best linear unbiased prediction (BLUP) random effects.","code":""},{"path":"https://github.com/BaderLab/FLASHMM/reference/lmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fitting Linear Mixed-effects Models — lmm","text":"list containing following components: dlogL First partial derivatives log-likelihoods feature (gene). niter Nmbers iterations feature (gene). coef matrix estimated coefficients (fixed effects), column corresponds feature (gene) row one covariate. se matrix standard errors estimated coefficients. t matrix t-values fixed effects, equal coef/se. df Degrees freedom. p matrix two-sided p-values fixed effects. cov array covariance matrices estimated coefficients (fixed effects). theta matrix estimated variance components, column corresponds feature (gene) row one variance component. last row variance component residual error. se.theta Standard errors estimated theta. RE matrix best linear unbiased prediction (BLUP) random effects.","code":""},{"path":"https://github.com/BaderLab/FLASHMM/reference/lmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fitting Linear Mixed-effects Models — lmm","text":"","code":"#Generate data: X, Y, and Z. set.seed(2024)  n <- 1e3 m <- 10 Y <- matrix(rnorm(m*n), m, n) rownames(Y) <- paste0(\"Gene\", 1:nrow(Y))  trt <- sample(c(\"A\", \"B\"), n, replace = TRUE) X <- model.matrix(~ 0 + trt)  q <- 20 sam <- rep(NA, n) sam[trt == \"A\"] <- paste0(\"A\", sample.int(q/2, sum(trt == \"A\"), replace = TRUE)) sam[trt == \"B\"] <- paste0(\"B\", sample.int(q/2, sum(trt == \"B\"), replace = TRUE)) Z <- model.matrix(~ 0 + sam) d <- ncol(Z)  #Fitting LMM by summary-level data n <- nrow(X) XX <- t(X)%*%X XY <- t(Y%*%X) ZX <- t(Z)%*%X ZY <- t(Y%*%Z) ZZ <- t(Z)%*%Z Ynorm <- rowSums(Y*Y) fit1 <- lmm(XX, XY, ZX, ZY, ZZ, Ynorm = Ynorm, n = n, d = d) str(fit1) #> List of 12 #>  $ method  : chr \"REML-FS\" #>  $ dlogL   : num [1:2, 1:10] -1.34e-06 -8.32e-09 -1.02e-06 -1.38e-09 9.52e-07 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : NULL #>   .. ..$ : chr [1:10] \"dl\" \"dl\" \"dl\" \"dl\" ... #>  $ niter   : num [1:10] 10 7 6 8 7 7 5 6 10 11 #>  $ coef    : num [1:2, 1:10] 0.03745 0.01666 -0.04225 -0.02294 -0.00892 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : chr [1:2] \"trtA\" \"trtB\" #>   .. ..$ : chr [1:10] \"Gene1\" \"Gene2\" \"Gene3\" \"Gene4\" ... #>  $ se      : num [1:2, 1:10] 0.0378 0.0376 0.0426 0.0424 0.0552 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : chr [1:2] \"trtA\" \"trtB\" #>   .. ..$ : chr [1:10] \"Gene1\" \"Gene2\" \"Gene3\" \"Gene4\" ... #>  $ t       : num [1:2, 1:10] 0.992 0.443 -0.992 -0.541 -0.162 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : chr [1:2] \"trtA\" \"trtB\" #>   .. ..$ : chr [1:10] \"Gene1\" \"Gene2\" \"Gene3\" \"Gene4\" ... #>  $ p       : num [1:2, 1:10] 0.322 0.658 0.321 0.589 0.872 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : chr [1:2] \"trtA\" \"trtB\" #>   .. ..$ : chr [1:10] \"Gene1\" \"Gene2\" \"Gene3\" \"Gene4\" ... #>  $ cov     : num [1:2, 1:2, 1:10] 0.00143 0 0 0.00141 0.00181 ... #>   ..- attr(*, \"dimnames\")=List of 3 #>   .. ..$ : chr [1:2] \"trtA\" \"trtB\" #>   .. ..$ : chr [1:2] \"trtA\" \"trtB\" #>   .. ..$ : chr [1:10] \"Gene1\" \"Gene2\" \"Gene3\" \"Gene4\" ... #>  $ df      : int 998 #>  $ theta   : num [1:2, 1:10] -0.00641 1.03645 -0.00132 0.97027 0.01133 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : chr [1:2] \"var1\" \"var0\" #>   .. ..$ : chr [1:10] \"Gene1\" \"Gene2\" \"Gene3\" \"Gene4\" ... #>  $ se.theta: num [1:2, 1:10] 0.00478 0.04681 0.00606 0.04383 0.01013 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : chr [1:2] \"var1\" \"var0\" #>   .. ..$ : chr [1:10] \"Gene1\" \"Gene2\" \"Gene3\" \"Gene4\" ... #>  $ RE      : NULL  #Fitting LMM using the summary-level data computed by sslmm ss <- sslmm(X, Y, Z) fit2 <- lmm(summary.stats = ss, d = d) identical(fit1, fit2) #> [1] TRUE"},{"path":"https://github.com/BaderLab/FLASHMM/reference/lmmfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Fitting Linear Mixed-effects Models — lmmfit","title":"Fitting Linear Mixed-effects Models — lmmfit","text":"lmmfit, wrapper function lmm, fits linear mixed-effects models (LMM) sample-level data. LMM parameters estimated restricted maximum likelihood (REML) Fisher scoring (FS) gradient descent algorithm.","code":""},{"path":"https://github.com/BaderLab/FLASHMM/reference/lmmfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fitting Linear Mixed-effects Models — lmmfit","text":"","code":"lmmfit(   Y,   X,   Z,   d,   theta0 = NULL,   method = \"REML-FS\",   max.iter = 50,   epsilon = 1e-05,   output.cov = TRUE,   output.RE = FALSE )"},{"path":"https://github.com/BaderLab/FLASHMM/reference/lmmfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fitting Linear Mixed-effects Models — lmmfit","text":"Y features--samples matrix responses (genes--cells matrix gene expressions scRNA-seq). X design matrix fixed effects, rows corresponding columns Y. Z design matrix random effects, rows corresponding columns Y. Z = [Z1, ..., Zk], Zi, =1,...,k, design matrix -th type random factor. d vector (m1,...,mk), mi = ncol(Zi), number columns Zi. m1 + ... + mk = ncol(Z), number columns Z. theta0 vector initial values variance components, (s1, ...,sk, s_(k+1)), si = sigma_i^2, variance component -th type random effects. s_(k+1) = sigma^2, variance component model residual error. method REML Fisher scoring (FS) iterative algorithm, REML-FS. max.iter maximal number iterations iterative algorithm. epsilon Positive convergence tolerance. absolute value first partial derivative log likelihood less epsilon, iterations converge. output.cov TRUE, output covariance matrices estimated coefficients, needed testing contrasts. output.RE TRUE, output best linear unbiased prediction (BLUP) random effects.","code":""},{"path":"https://github.com/BaderLab/FLASHMM/reference/lmmfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fitting Linear Mixed-effects Models — lmmfit","text":"list containing following components: dlogL First partial derivatives log-likelihoods feature (gene). niter Nmbers iterations feature (gene). coef matrix estimated coefficients (fixed effects), column corresponds feature (gene) row one covariate. se matrix standard errors estimated coefficients. t matrix t-values fixed effects, equal coef/se. df Degrees freedom. p matrix two-sided p-values fixed effects. cov array covariance matrices estimated coefficients (fixed effects). theta matrix estimated variance components, column corresponds feature (gene) row one variance component. last row variance component residual error. se.theta Standard errors estimated theta. RE matrix best linear unbiased prediction (BLUP) random effects.","code":""},{"path":"https://github.com/BaderLab/FLASHMM/reference/lmmfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fitting Linear Mixed-effects Models — lmmfit","text":"","code":"#Generate data: X, Y, and Z. set.seed(2024)  n <- 1e3 m <- 10 Y <- matrix(rnorm(m*n), m, n) rownames(Y) <- paste0(\"Gene\", 1:nrow(Y))  trt <- sample(c(\"A\", \"B\"), n, replace = TRUE) X <- model.matrix(~ 0 + trt)  q <- 20 sam <- rep(NA, n) sam[trt == \"A\"] <- paste0(\"A\", sample.int(q/2, sum(trt == \"A\"), replace = TRUE)) sam[trt == \"B\"] <- paste0(\"B\", sample.int(q/2, sum(trt == \"B\"), replace = TRUE)) Z <- model.matrix(~ 0 + sam) d <- ncol(Z)  #Fitting LMM by the cell-level data fit <- lmmfit(Y, X, Z, d = d) str(fit) #> List of 12 #>  $ method  : chr \"REML-FS\" #>  $ dlogL   : num [1:2, 1:10] -1.34e-06 -8.32e-09 -1.02e-06 -1.38e-09 9.52e-07 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : NULL #>   .. ..$ : chr [1:10] \"dl\" \"dl\" \"dl\" \"dl\" ... #>  $ niter   : num [1:10] 10 7 6 8 7 7 5 6 10 11 #>  $ coef    : num [1:2, 1:10] 0.03745 0.01666 -0.04225 -0.02294 -0.00892 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : chr [1:2] \"trtA\" \"trtB\" #>   .. ..$ : chr [1:10] \"Gene1\" \"Gene2\" \"Gene3\" \"Gene4\" ... #>  $ se      : num [1:2, 1:10] 0.0378 0.0376 0.0426 0.0424 0.0552 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : chr [1:2] \"trtA\" \"trtB\" #>   .. ..$ : chr [1:10] \"Gene1\" \"Gene2\" \"Gene3\" \"Gene4\" ... #>  $ t       : num [1:2, 1:10] 0.992 0.443 -0.992 -0.541 -0.162 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : chr [1:2] \"trtA\" \"trtB\" #>   .. ..$ : chr [1:10] \"Gene1\" \"Gene2\" \"Gene3\" \"Gene4\" ... #>  $ p       : num [1:2, 1:10] 0.322 0.658 0.321 0.589 0.872 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : chr [1:2] \"trtA\" \"trtB\" #>   .. ..$ : chr [1:10] \"Gene1\" \"Gene2\" \"Gene3\" \"Gene4\" ... #>  $ cov     : num [1:2, 1:2, 1:10] 0.00143 0 0 0.00141 0.00181 ... #>   ..- attr(*, \"dimnames\")=List of 3 #>   .. ..$ : chr [1:2] \"trtA\" \"trtB\" #>   .. ..$ : chr [1:2] \"trtA\" \"trtB\" #>   .. ..$ : chr [1:10] \"Gene1\" \"Gene2\" \"Gene3\" \"Gene4\" ... #>  $ df      : int 998 #>  $ theta   : num [1:2, 1:10] -0.00641 1.03645 -0.00132 0.97027 0.01133 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : chr [1:2] \"var1\" \"var0\" #>   .. ..$ : chr [1:10] \"Gene1\" \"Gene2\" \"Gene3\" \"Gene4\" ... #>  $ se.theta: num [1:2, 1:10] 0.00478 0.04681 0.00606 0.04383 0.01013 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : chr [1:2] \"var1\" \"var0\" #>   .. ..$ : chr [1:10] \"Gene1\" \"Gene2\" \"Gene3\" \"Gene4\" ... #>  $ RE      : NULL  #Hypothesis tests lmmtest(fit) #>             trtA_t     trtB_t     trtA_p    trtB_p #> Gene1   0.99151700  0.4430047 0.32167353 0.6578584 #> Gene2  -0.99188018 -0.5407880 0.32149640 0.5887744 #> Gene3  -0.16176056 -0.1851246 0.87152715 0.8531689 #> Gene4  -0.56751196 -0.8348433 0.57049404 0.4040058 #> Gene5  -0.97591263 -0.2341318 0.32934425 0.8149307 #> Gene6  -0.05543855 -0.7219293 0.95580018 0.4705070 #> Gene7  -1.17149564 -0.6587799 0.24167922 0.5101891 #> Gene8   0.10299581  2.2227291 0.91798699 0.0264575 #> Gene9   1.32183317  0.3175327 0.18652661 0.7509059 #> Gene10 -2.00516281  0.2376670 0.04521529 0.8121882 lmmtest(fit, index = 2) #>            trtB_t    trtB_p #> Gene1   0.4430047 0.6578584 #> Gene2  -0.5407880 0.5887744 #> Gene3  -0.1851246 0.8531689 #> Gene4  -0.8348433 0.4040058 #> Gene5  -0.2341318 0.8149307 #> Gene6  -0.7219293 0.4705070 #> Gene7  -0.6587799 0.5101891 #> Gene8   2.2227291 0.0264575 #> Gene9   0.3175327 0.7509059 #> Gene10  0.2376670 0.8121882 lmmtest(fit, contrast = cbind(\"B-A\" = c(-1, 1))) #>              B-A_t     B-A_p #> Gene1  -0.39018951 0.6964797 #> Gene2   0.32121982 0.7481111 #> Gene3  -0.01616384 0.9871069 #> Gene4  -0.18729690 0.8514659 #> Gene5   0.52649028 0.5986646 #> Gene6  -0.47033528 0.6382183 #> Gene7   0.36502924 0.7151669 #> Gene8   1.49642518 0.1348591 #> Gene9  -0.71274410 0.4761707 #> Gene10  1.58872838 0.1124385"},{"path":"https://github.com/BaderLab/FLASHMM/reference/lmmtest.html","id":null,"dir":"Reference","previous_headings":"","what":"Testing Fixed Effects and Contrasts of the Fixed Effects — lmmtest","title":"Testing Fixed Effects and Contrasts of the Fixed Effects — lmmtest","text":"lmmtest used test fixed effects contrasts fixed effects.","code":""},{"path":"https://github.com/BaderLab/FLASHMM/reference/lmmtest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Testing Fixed Effects and Contrasts of the Fixed Effects — lmmtest","text":"","code":"lmmtest(   fit,   index,   contrast = NULL,   alternative = c(\"two.sided\", \"less\", \"greater\") )"},{"path":"https://github.com/BaderLab/FLASHMM/reference/lmmtest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Testing Fixed Effects and Contrasts of the Fixed Effects — lmmtest","text":"fit result lmmfit/lmm, contains coef (estimates fixed effects), matrix rows representing fixed effects columns different response variables model, cov (covariance matrix fixed effects), array three dimmesions different response variables model, df (residual degree freedom linear model). index vector integers characters indicating fixed effects tested. default index consists fixed effects. Ignored contrast NULL. contrast matrix columns corresponding contrasts fixed effects tested. alternative character string specifying alternative hypothesis, one \"two.sided\", \"greater\" \"less\".","code":""},{"path":"https://github.com/BaderLab/FLASHMM/reference/lmmtest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Testing Fixed Effects and Contrasts of the Fixed Effects — lmmtest","text":"matrix t-values p-values, rows correspond features (genes) columns fixed effects (covariates). .","code":""},{"path":"https://github.com/BaderLab/FLASHMM/reference/simuRNAseq.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulating Multi-sample Multi-cell-type scRNA-seq Dataset based on Negative Binomial Distribution — simuRNAseq","title":"Simulating Multi-sample Multi-cell-type scRNA-seq Dataset based on Negative Binomial Distribution — simuRNAseq","text":"simuRNAseq simulates scRNA-seq data multiple subjects (samples), multiple clusters (cell-types) two treatments (conditions) based negative binomial (NB) distribution using reference data background control. reference data consisting genes--cells counts matrix used estimate NB dispersion means genes simulated. simulated genes randomly selected reference data. NB dispersion estimated method--moments estimate (MME). NB means background control estimated sample mean. NB means differentially expressed (DE) genes given sample mean plus log-fold change (logFC). simulated cells randomly selected meta data specifies subjects, cell-types treatments cells. meta data consists samples, clusters cell types, treatments, can generated either reference data randomly. provided, randomly generated. random seed recommended specified set.seed simulating data.","code":""},{"path":"https://github.com/BaderLab/FLASHMM/reference/simuRNAseq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulating Multi-sample Multi-cell-type scRNA-seq Dataset based on Negative Binomial Distribution — simuRNAseq","text":"","code":"simuRNAseq(   counts,   nGenes = nrow(counts),   nCells = ncol(counts),   metadata = NULL,   samples.nested = TRUE,   nsam = 25,   ncls = 10,   ntrt = 2,   trt = NULL,   nDEgenes = ncls,   nDEgenesType,   pDEgenesType = NULL,   adjust.library.size = TRUE,   direction = c(\"both\", \"up\", \"down\"),   minbeta = 0.25,   maxbeta = 1,   var.randomeffects = 0.1 )"},{"path":"https://github.com/BaderLab/FLASHMM/reference/simuRNAseq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulating Multi-sample Multi-cell-type scRNA-seq Dataset based on Negative Binomial Distribution — simuRNAseq","text":"counts genes--cells matrix reference counts. missing, counts generated negative binomial distribution. nGenes Number genes simulated. nCells Number cells simulated. metadata meta data consisting 4 columns: sam (sample labels), cls (cluster lables cell types), trt (treatments conditions) libsize (library size total counts per cell), randomly generated provided. samples.nested TRUE, metadata provided, simulated subject (sample) belongs one condition (either treatment control), , subject nested condition (treatment). nsam Number subjects (individuals). ncls Number clusters (cell-types). ntrt Number treatments (one condition treated). trt Treatment, specifying condition treated. nDEgenes Total number DE genes. nDEgenesType Number DE genes specific cell type, named cell cluster labels. pDEgenesType Proportion DE genes cell-type. Default NULL means equal proportion. adjust.library.size TRUE, adjust library sizes using reference counts. direction Specify DE genes - /-regulated. minbeta Lower bound DE gene logFC. maxbeta Upper bound DE gene logFC. minbeta < maxbeta. direction = \"\", minbeta*maxbeta > 0. direction = \"\", minbeta > 0. direction = \"\", maxbeta < 0. var.randomeffects Variance random effects","code":""},{"path":"https://github.com/BaderLab/FLASHMM/reference/simuRNAseq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulating Multi-sample Multi-cell-type scRNA-seq Dataset based on Negative Binomial Distribution — simuRNAseq","text":"ref.mean.dispersion: data frame reference counts' means dispersion, metadata: Meta data consisting 4 columns: sam (sample labels), cls (cluster lables cell types), trt (two treatments/conditions) libsize (library sizes). counts: genes--cells matrix simulated counts. DEgenes: data frame DE genes consisting 3 columns: gene, beta (effect), cluster gene specific. treatment: condition treated.","code":""},{"path":"https://github.com/BaderLab/FLASHMM/reference/simuRNAseq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulating Multi-sample Multi-cell-type scRNA-seq Dataset based on Negative Binomial Distribution — simuRNAseq","text":"","code":"#Simulate a multi-sample multi-cell-type scRNA-seq dataset. set.seed(2412) dat <- simuRNAseq(nGenes = 50, nCells = 1000, nsam = 25, ncls = 4, ntrt = 2, nDEgenes = 6) #> Message: the condition B is treated. str(dat) #> List of 5 #>  $ ref.mean.dispersion:'data.frame':\t50 obs. of  2 variables: #>   ..$ mu        : num [1:50] 1.077 0.992 2.815 1.945 2.06 ... #>   ..$ dispersion: num [1:50] 1.602 2.989 0.954 2.937 1.914 ... #>  $ metadata           :'data.frame':\t1000 obs. of  4 variables: #>   ..$ sam    : chr [1:1000] \"B1\" \"A6\" \"A2\" \"B8\" ... #>   ..$ cls    : chr [1:1000] \"C4\" \"C3\" \"C1\" \"C1\" ... #>   ..$ trt    : chr [1:1000] \"B\" \"A\" \"A\" \"B\" ... #>   ..$ libsize: num [1:1000] 117 75 101 80 123 113 125 95 77 95 ... #>  $ counts             : num [1:50, 1:1000] 0 2 6 2 5 2 0 0 2 11 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : chr [1:50] \"Gene1\" \"Gene2\" \"Gene3\" \"Gene4\" ... #>   .. ..$ : chr [1:1000] \"Cell1\" \"Cell2\" \"Cell3\" \"Cell4\" ... #>  $ DEgenes            :'data.frame':\t6 obs. of  3 variables: #>   ..$ gene   : chr [1:6] \"Gene45\" \"Gene46\" \"Gene47\" \"Gene48\" ... #>   ..$ beta   : num [1:6] 0.55 0.365 0.831 -0.948 -0.875 ... #>   ..$ cluster: chr [1:6] \"C1\" \"C2\" \"C3\" \"C3\" ... #>  $ treatment          : chr \"B\" table(dat$metadata[, c(\"sam\", \"trt\")]) #The samples are nested in a condition. #>      trt #> sam    A  B #>   A1  33  0 #>   A10 40  0 #>   A11 36  0 #>   A12 29  0 #>   A13 39  0 #>   A14 35  0 #>   A2  38  0 #>   A3  42  0 #>   A4  33  0 #>   A5  32  0 #>   A6  35  0 #>   A7  33  0 #>   A8  44  0 #>   A9  44  0 #>   B1   0 42 #>   B10  0 35 #>   B11  0 40 #>   B2   0 44 #>   B3   0 32 #>   B4   0 47 #>   B5   0 42 #>   B6   0 50 #>   B7   0 40 #>   B8   0 63 #>   B9   0 52  #Analyze differentially expressed (DE) genes specific to a cell-type using LMM. Y <- log(dat$counts + 1) #expressions (log-transformed counts) X <- model.matrix(~ 0 + log(libsize) + cls + cls:trt, data = dat$metadata) Z <- model.matrix(~ 0 + sam, data = dat$metadata) d <- ncol(Z)  #Fitting LMM using cell-level data. fit <- lmmfit(Y, X, Z, d = d)  #Fitting LMM using summary-level data. ss <- sslmm(X, Y, Z) fitss <- lmm(summary.stats = ss, d = d) identical(fit, fitss) #> [1] TRUE  #Hypothesis tests test <- lmmtest(fit) head(test) #>       log(libsize)_t   clsC1_t   clsC2_t   clsC3_t   clsC4_t clsC1:trtB_t #> Gene1       3.556438 -2.415894 -2.595711 -2.557626 -2.446634    0.8697778 #> Gene2       6.135313 -4.869716 -4.991892 -5.024973 -5.006548    0.3659413 #> Gene3       3.609899 -2.312274 -2.246792 -2.148500 -2.220267    0.1515357 #> Gene4       4.123944 -2.670994 -2.510841 -2.585615 -2.698308    0.9707563 #> Gene5       2.818000 -1.322021 -1.238786 -1.253600 -1.205876   -0.9577914 #> Gene6       3.592507 -2.552389 -2.766682 -2.699148 -2.635315    0.5414995 #>       clsC2:trtB_t clsC3:trtB_t clsC4:trtB_t log(libsize)_p      clsC1_p #> Gene1    2.0700456    1.5066385   -0.3263183   3.936946e-04 1.587661e-02 #> Gene2    1.0976568    1.5001771    1.6810047   1.226867e-09 1.300111e-06 #> Gene3   -0.1112106   -0.3659261   -0.4559326   3.216502e-04 2.096680e-02 #> Gene4    0.7423556    0.8883383    0.6462646   4.036515e-05 7.686618e-03 #> Gene5   -0.5997369   -1.0410003   -1.7515738   4.928509e-03 1.864664e-01 #> Gene6    1.5196520    0.3102291    0.6687761   3.436079e-04 1.084772e-02 #>            clsC2_p      clsC3_p      clsC4_p clsC1:trtB_p clsC2:trtB_p #> Gene1 9.579168e-03 1.068679e-02 1.459256e-02    0.3846325   0.03870667 #> Gene2 7.060831e-07 5.971329e-07 6.556356e-07    0.7144869   0.27262100 #> Gene3 2.487275e-02 3.191586e-02 2.662620e-02    0.8795840   0.91147190 #> Gene4 1.220264e-02 9.862323e-03 7.087769e-03    0.3319065   0.45804781 #> Gene5 2.157181e-01 2.102832e-01 2.281532e-01    0.3384015   0.54881868 #> Gene6 5.768368e-03 7.070027e-03 8.537187e-03    0.5882851   0.12891743 #>       clsC3:trtB_p clsC4:trtB_p #> Gene1    0.1322220   0.74425245 #> Gene2    0.1338870   0.09307711 #> Gene3    0.7144983   0.64853836 #> Gene4    0.3745743   0.51825766 #> Gene5    0.2981293   0.08015644 #> Gene6    0.7564520   0.50379408  #The DE genes specific to a cell-type. tail(test[, grep(\":\", colnames(test))]) #>        clsC1:trtB_t clsC2:trtB_t clsC3:trtB_t clsC4:trtB_t clsC1:trtB_p #> Gene45    2.1720213   0.55889245   0.08637871   -0.9345875   0.03009058 #> Gene46    0.8149981   2.28175377  -0.73193986    0.8343811   0.41526921 #> Gene47    0.5897109   1.41986369   5.97111283    0.8070739   0.55551888 #> Gene48    0.2007912  -0.06210722  -4.68109321   -2.2274365   0.84090305 #> Gene49   -0.2895705   0.03168994  -3.22145147    0.9415348   0.77220544 #> Gene50    1.8874002   1.58847538   6.53482944    1.2079394   0.05939855 #>        clsC2:trtB_p clsC3:trtB_p clsC4:trtB_p #> Gene45   0.57636139 9.311828e-01   0.35022860 #> Gene46   0.02271521 4.643783e-01   0.40426735 #> Gene47   0.15596186 3.279879e-09   0.41981754 #> Gene48   0.95048997 3.250047e-06   0.02614204 #> Gene49   0.97472569 1.316972e-03   0.34666032 #> Gene50   0.11249785 1.017003e-10   0.22735878 #The true DE genes dat$DEgenes #>      gene       beta cluster #> 45 Gene45  0.5496463      C1 #> 46 Gene46  0.3652007      C2 #> 47 Gene47  0.8306937      C3 #> 48 Gene48 -0.9476624      C3 #> 49 Gene49 -0.8751216      C3 #> 50 Gene50  0.9050662      C3"},{"path":"https://github.com/BaderLab/FLASHMM/reference/sslmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Computing Summary-level Data from Individual-level Data — sslmm","title":"Computing Summary-level Data from Individual-level Data — sslmm","text":"sslmm can used compute correlation-related summary statistics (summary-level data) lmm function.","code":""},{"path":"https://github.com/BaderLab/FLASHMM/reference/sslmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computing Summary-level Data from Individual-level Data — sslmm","text":"","code":"sslmm(X, Y, Z)"},{"path":"https://github.com/BaderLab/FLASHMM/reference/sslmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computing Summary-level Data from Individual-level Data — sslmm","text":"X design matrix fixed effects, rows corresponding columns Y. Y features--samples matrix responses (genes--cells matrix gene expressions scRNA-seq). Z design matrix random effects, rows corresponding columns Y.","code":""},{"path":"https://github.com/BaderLab/FLASHMM/reference/sslmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computing Summary-level Data from Individual-level Data — sslmm","text":"list summary statistics: XX = t(X)%*%X, XY = t(X)%*%t(Y), ZX = t(Z)%*%X, ZY = t(Z)%*%t(Y), ZZ = t(Z)%*%Z, Ynorm = rowSums(Y*Y) n = nrow(X).","code":""},{"path":"https://github.com/BaderLab/FLASHMM/reference/sslmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Computing Summary-level Data from Individual-level Data — sslmm","text":"","code":"n <- 1e3 set.seed(2024) p <- 2 X <- matrix(rnorm(p*n), n, p) colnames(X) <- paste0(\"X\", 1:ncol(X)) m <- 3 Y <- matrix(rnorm(m*n), m, n) rownames(Y) <- paste0(\"Y\", 1:nrow(Y)) q <- 4 Z <- gl(q, n/q, labels = letters[1:q]) Z <- model.matrix(~ 0 + Z) sslmm(X, Y, Z) #> $n #> [1] 1000 #>  #> $XX #>           X1        X2 #> X1 964.78381 -13.62653 #> X2 -13.62653 945.83427 #>  #> $XY #>           Y1        Y2         Y3 #> X1  34.59866 -58.55644 -30.742385 #> X2 -27.22278 -21.79678  -9.024452 #>  #> $ZX #>            X1        X2 #> Za  10.129790 -1.989424 #> Zb  15.517769 22.103361 #> Zc -16.168713  2.409996 #> Zd  -4.936147  3.201936 #>  #> $ZY #>             Y1          Y2        Y3 #> Za   6.2979384  -0.2567696 16.103129 #> Zb   0.8901537 -15.1695035 -5.891425 #> Zc -16.3589237  10.2965567 -4.849434 #> Zd  -6.7887706  -3.4119874  2.865243 #>  #> $ZZ #>     Za  Zb  Zc  Zd #> Za 250   0   0   0 #> Zb   0 250   0   0 #> Zc   0   0 250   0 #> Zd   0   0   0 250 #>  #> $Ynorm #>        Y1        Y2        Y3  #>  988.7703  991.0990 1019.9191  #>"},{"path":"https://github.com/BaderLab/FLASHMM/news/index.html","id":"flashmm-010","dir":"Changelog","previous_headings":"","what":"FLASHMM 0.1.0","title":"FLASHMM 0.1.0","text":"Initial CRAN submission.","code":""}]
